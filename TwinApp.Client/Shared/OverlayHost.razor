@using System.Diagnostics
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@using TwinApp.Client.Services
@inject AuthServices Auth
@inject ProjectService Projects
@inject IGraphicService Graphics


<AuthorizeView>
    
    <NotAuthorized>
        <LoginPanel/>
    </NotAuthorized>

    <Authorized>
        @if (!Projects.HasActiveProject)
        {
            Trace.WriteLine("OverlayHost Authorized :: No Active Project");
            <ProjectSelectionPanel OnProjectSelected="HandleProjectSelection" Projects="Projects.Projects"/>
        }
        else
        {
            Trace.WriteLine($"OverlayHost Authorized :: Active Project {Projects.ActiveProjectId}");
            
            <LeftMenuPanel/>
        }

        @code {
            private bool _isLoggedIn;
            private bool _isAuthChecked = false;

            protected override async Task OnInitializedAsync()
            {
                // Subscribe to project changes
                Projects.OnProjectChanged += () => InvokeAsync(StateHasChanged);

                // Check authentication status
                _isLoggedIn = await Auth.IsLoggedInAsync();
                _isAuthChecked = true;

                if (_isLoggedIn)
                {
                    await Projects.LoadProjectsAsync();
                }
            }

            private async Task HandleProjectSelection(string projectId)
            {
                await Task.Delay(1000);
                Projects.OpenProject(projectId);

                await Graphics.LoadProjectAsync(projectId);

                StateHasChanged();
            }

        }

    </Authorized>
</AuthorizeView>

